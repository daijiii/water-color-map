<!DOCTYPE html>
<html>
  <head>
    <title>Watercolor Map Markers</title>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBdwyyX_C68If8L3fkyJT2DKaAMkZlKdhk&callback=initMap" async defer></script>
    <style>
      #map {
        height: 90%;
      }
      html, body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
      #controls {
        position: absolute;
        top: 10px;
        left: 10px;
        z-index: 5;
        background: white;
        padding: 10px;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      }

      #controls button {
    width: 70px;  /* ボタンの幅を100pxに設定 */
    height: 30px;  /* ボタンの高さを50pxに設定 */
    font-size: 12px;  /* テキストのフォントサイズを16pxに設定 */
    margin-top: 5px;  /* ボタン間のマージン（上）を10pxに設定 */
  }
    </style>
  </head>
  <body>
    <div id="controls">
      <label for="color">Choose a color:</label>
      <select id="color">
        <option value="rgba(0, 128, 255, 0.5)">Blue</option>
        <option value="rgba(255, 0, 0, 0.5)">Red</option>
        <option value="rgba(0, 255, 0, 0.5)">Green</option>
        <option value="rgba(255, 255, 0, 0.5)">Yellow</option>
        <option value="rgba(255, 0, 255, 0.5)">Magenta</option>
        <option value="rgba(0, 255, 255, 0.5)">Cyan</option>
      </select>
      <br>
      <button id="startButton">Start</button>
      <button id="stopButton">Stop</button>
    </div>

    <div id="map"></div>
    <script>
      let map;
      let path = [];
      let drawing = false;
      let marker = null; // マーカーをグローバル変数として定義

      function initMap() {
        const mapOptions = {
          center: { lat: 35.6812, lng: 139.7671 },
          zoom: 15,
          mapTypeId: google.maps.MapTypeId.SATELLITE,
          styles: [
            {
              "elementType": "geometry",
              "stylers": [
                {
                  "color": "#f5f5f5"
                }
              ]
            },
            {
              "elementType": "labels.icon",
              "stylers": [
                {
                  "visibility": "off"
                }
              ]
            },
            {
              "elementType": "labels.text.fill",
              "stylers": [
                {
                  "color": "#616161"
                }
              ]
            },
            {
              "elementType": "labels.text.stroke",
              "stylers": [
                {
                  "color": "#f5f5f5"
                }
              ]
            },
            {
              "featureType": "administrative.land_parcel",
              "elementType": "labels.text.fill",
              "stylers": [
                {
                  "color": "#bdbdbd"
                }
              ]
            },
            {
              "featureType": "poi",
              "elementType": "geometry",
              "stylers": [
                {
                  "color": "#eeeeee"
                }
              ]
            },
            {
              "featureType": "poi",
              "elementType": "labels.text.fill",
              "stylers": [
                {
                  "color": "#757575"
                }
              ]
            },
            {
              "featureType": "poi.park",
              "elementType": "geometry",
              "stylers": [
                {
                  "color": "#e5e5e5"
                }
              ]
            },
            {
              "featureType": "poi.park",
              "elementType": "labels.text.fill",
              "stylers": [
                {
                  "color": "#9e9e9e"
                }
              ]
            },
            {
              "featureType": "road",
              "elementType": "geometry",
              "stylers": [
                {
                  "color": "#ffffff"
                }
              ]
            },
            {
              "featureType": "road.arterial",
              "elementType": "labels.text.fill",
              "stylers": [
                {
                  "color": "#757575"
                }
              ]
            },
            {
              "featureType": "road.highway",
              "elementType": "geometry",
              "stylers": [
                {
                  "color": "#dadada"
                }
              ]
            },
            {
              "featureType": "road.highway",
              "elementType": "labels.text.fill",
              "stylers": [
                {
                  "color": "#616161"
                }
              ]
            },
            {
              "featureType": "road.local",
              "elementType": "labels.text.fill",
              "stylers": [
                {
                  "color": "#9e9e9e"
                }
              ]
            },
            {
              "featureType": "transit.line",
              "elementType": "geometry",
              "stylers": [
                {
                  "color": "#e5e5e5"
                }
              ]
            },
            {
              "featureType": "transit.station",
              "elementType": "geometry",
              "stylers": [
                {
                  "color": "#eeeeee"
                }
              ]
            },
            {
              "featureType": "water",
              "elementType": "geometry",
              "stylers": [
                {
                  "color": "#c9c9c9"
                }
              ]
            },
            {
              "featureType": "water",
              "elementType": "labels.text.fill",
              "stylers": [
                {
                  "color": "#9e9e9e"
                }
              ]
            }
          ]
        };

        map = new google.maps.Map(document.getElementById('map'), mapOptions);

        if (navigator.geolocation) {
          
          const geoOptions = {
  enableHighAccuracy: true, // 高精度モードを有効化
  maximumAge: 0, // 常に最新の位置情報を取得
  timeout: 10000 // 10秒以内に位置情報を取得
};
          
let watchID = navigator.geolocation.watchPosition((position) => {
            const pos = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };

            if (!marker) {
              marker = new google.maps.Marker({
                position: pos,
                map: map,
                title: "現在地"
              });
            } else {
              marker.setPosition(pos);
            }

            map.setCenter(pos);
          }, (error) => {
           
            console.error("GPSの取得に失敗しました: ", errorMessage);
            alert("GPSの取得に失敗しました: " + errorMessage);
          }, geoOptions);
        }

        map.addListener('click', (e) => {
          if (drawing) {
            addWatercolorMarker(e.latLng);
          }
        });

        document.getElementById('startButton').addEventListener('click', () => {
          path = []; // Start a new path
          drawing = true;
        });

        document.getElementById('stopButton').addEventListener('click', () => {
          drawing = false;
        });
      }

      function addWatercolorMarker(location) {
        const color = document.getElementById('color').value;
        path.push(location);

        const canvas = document.createElement('canvas');
        const size = 100;
        canvas.width = size;
        canvas.height = size;
        const ctx = canvas.getContext('2d');

        ctx.globalCompositeOperation = 'multiply';

        const gradient = ctx.createRadialGradient(size / 2, size / 2, size / 10, size / 2, size / 2, size / 2);
        gradient.addColorStop(0, color);
        gradient.addColorStop(0.5, 'rgba(255, 255, 255, 0.2)');
        gradient.addColorStop(1, 'rgba(255, 255, 255, 0)');
        ctx.fillStyle = gradient;
        ctx.beginPath();
        ctx.arc(size / 2, size / 2, size / 2, 0, 2 * Math.PI);
        ctx.fill();

        const image = canvas.toDataURL();

        new google.maps.Marker({
          position: location,
          map: map,
          icon: {
            url: image,
            scaledSize: new google.maps.Size(size, size),
            anchor: new google.maps.Point(size / 2, size / 2),
          },
          clickable: false
        });

        drawWatercolorPolyline();
      }

      function drawWatercolorPolyline() {
        const color = document.getElementById('color').value;
        const baseOpacity = 0.02; // より薄い線にするためにベースの不透明度を低く設定

        const numLines = 50;
        const opacityDecrease = baseOpacity / path.length;

        for (let i = 1; i <= numLines; i++) { // 線の数を増やしてぼかし効果を強化
          for (let j = 0; j < path.length - 1; j++) {
            const polyline = new google.maps.Polyline({
              path: [path[j], path[j + 1]],
              geodesic: true,
              strokeColor: color,
              strokeOpacity: baseOpacity - j * opacityDecrease,
              strokeWeight: 1 + i * 0.4, // 線の太さをより細かく調整
              map: map
            });
          }
        }
      }
    </script>
  </body>
</html>
